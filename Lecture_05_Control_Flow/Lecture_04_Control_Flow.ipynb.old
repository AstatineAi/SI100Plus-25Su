{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lecture 04: 控制流\n",
    "\n",
    "### 控制流 - 条件语句\n",
    "\n",
    "#### `if`语句：\n",
    "\n",
    "语法：\n",
    "```Python\n",
    "if condition:\n",
    "    statement\n",
    "```\n",
    "\n",
    "其中condition部分是一个布尔表达式，如果为`True`，则执行statement处的语句。如果为`False`，则忽略statement，直接执行后续语句。例如："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=10\n",
    "if x>0:\n",
    "    print(\"x是正数\")\n",
    "    print(\"x =\",x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=10\n",
    "if x<=0:\n",
    "    # 由于x<=0为False，if内的语句将不会被执行\n",
    "    print(\"x是负数\")\n",
    "    print(\"|x| =\",-x)\n",
    "\n",
    "# if后的语句正常执行\n",
    "print(\"后续语句...\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `if-else`语句：\n",
    "\n",
    "语法：\n",
    "```Python\n",
    "if condition:\n",
    "    statement1\n",
    "else:\n",
    "    statement2\n",
    "```\n",
    "\n",
    "condition部分仍然是一个布尔表达式。如果其为`True`，则执行statement1；如果其为`False`，则执行statement2。\n",
    "\n",
    "例子：（你可以自行更改`x`的值来观察程序是如何执行的）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=10\n",
    "if x>0:\n",
    "    print(\"x是正数\")\n",
    "    print(\"x =\",x)\n",
    "else:\n",
    "    print(\"x是负数\")\n",
    "    print(\"|x| =\",-x)\n",
    "\n",
    "print(\"后续语句...\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `if-elif-else`语句：\n",
    "\n",
    "语法：\n",
    "```Python\n",
    "if condition:\n",
    "    statement1\n",
    "elif condition2:\n",
    "    statement2\n",
    "# 可以有任意多个elif\n",
    "else:\n",
    "    statement\n",
    "```\n",
    "\n",
    "在上述`if-elif-else`语句中，先判断condition，如果其为`True`，执行statement1。否则判断condition2，如果其为`True`，执行statement2。如果有多个`elif`，进行同样的操作。如果所有condition都为`False`，执行statement。在执行完任意一个statement后，执行之后的语句。\n",
    "\n",
    "例子：（你同样可以自行更改`x`的值）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=10\n",
    "if x>0:\n",
    "    print(\"x是正数\")\n",
    "    print(\"x =\",x)\n",
    "elif x<0:\n",
    "    print(\"Oops,x is negative\")\n",
    "    print(\"|x| =\",-x)\n",
    "else:\n",
    "    print(\"x正好是0\")\n",
    "\n",
    "print(\"后续语句...\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `if`语句的嵌套\n",
    "\n",
    "在以上三种语句中，所有statement的部分也可以是`if`相关的语句。\n",
    "\n",
    "例如：(你同样可以自行更改x的值)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=10\n",
    "if x>0:\n",
    "    # 当x>0时，执行下列if-elif-else语句\n",
    "    if x%3==0:\n",
    "        print(\"x是三的倍数\")\n",
    "    elif x%3==1:\n",
    "        print(\"x被三除余1\")\n",
    "    else:\n",
    "        print(\"x被三除余2\")\n",
    "else:\n",
    "    # x<=0时，执行此处的print\n",
    "    print(\"x<=0\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 控制流 - 循环语句\n",
    "\n",
    "#### `while`语句\n",
    "\n",
    "语法：\n",
    "```Python\n",
    "while condition:\n",
    "    statements\n",
    "```\n",
    "\n",
    "当程序进入到一个`while`语句时，如果condition为`True`，则重复执行**循环体**statements处的语句，直到condition为`False`时结束。\n",
    "\n",
    "注意：condition处的条件在每次试图执行statement前都会重新判断一次。\n",
    "\n",
    "例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=10\n",
    "while x>0: \n",
    "    # 当x>0时就执行循环体\n",
    "    print(x)\n",
    "    x-=1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "如果把上面代码段中的`x-=1`删去，会发生什么情况呢？\n",
    "\n",
    "显然，`x>0`会永远为`True`，那么循环将永不停止！这种情况被称为死循环。\n",
    "\n",
    "我们应该避免出现死循环。可以发现此处死循环的成因是condition处的条件一直未变，因此我们应该保证：在循环体中，执行修改条件的语句在整个循环过程中必定会执行。此处为`x-=1`。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `break`和`continue`语句\n",
    "\n",
    "当执行到`break`语句时，程序强制跳出循环，即使条件为真。例如："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=int(input(\"input n\"))\n",
    "i=1\n",
    "while i<20:\n",
    "    print(i,end=' ')\n",
    "    if i>=n:\n",
    "        # 一旦i>=n为True，执行下面的break语句\n",
    "        # 强制跳出循环，无视之后的所有循环体，执行之后的语句\n",
    "        break\n",
    "    print(i)\n",
    "    i+=1\n",
    "\n",
    "print(\"循环结束\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "当执行到`continue`语句时，程序无视之后的循环体，重新回到对于condition的判断这一步。例如："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=int(input(\"input n\"))\n",
    "i=0\n",
    "while i<=n:\n",
    "    i+=1\n",
    "    print(i)\n",
    "    if i%2==0:\n",
    "        # 这里，如果i%2==0为True，即i为偶数，就执行下面的continue语句\n",
    "        # continue语句会让程序重新回到判断条件i<=n的步骤\n",
    "        continue\n",
    "    print(i)\n",
    "\n",
    "print(\"循环结束\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 列表，元素和字典\n",
    "\n",
    "### List(列表)\n",
    "\n",
    "#### 列表支持的操作：\n",
    "\n",
    "列表是一种复合数据类型(compound data type)。列表可以被表示为在**方括号**`[]`中用逗号`,`分开的一列值，列表中的值的数据类型可以不同。列表支持以下操作：\n",
    "\n",
    "- construct(构造): `list=[val_0,val_1,...,val_n]` (可以有1项或者0项)\n",
    "- operator(运算符)：`+`可以连接两个List\n",
    "- length(长度): 可以用`len(list)`获取`list`中的元素个数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "emptyList=[]                            # 空的列表\n",
    "singleValueList=[\"Ciallo\"]              # 一个只含有一个元素的列表\n",
    "square=[0,1,4,9,16,25,36]               # 列表的构造\n",
    "studentData=[\"Emiya\",\"M\",1024533074]    # 列表中的值数据类型可以不同\n",
    "connectedList=singleValueList+[\"Hello\"] # '+'运算\n",
    "\n",
    "print(emptyList)\n",
    "print(singleValueList)\n",
    "print(square)\n",
    "print(studentData)\n",
    "print(connectedList)\n",
    "print(len(square))                      # len的使用，这句print输出square中的元素个数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "和string类似，list也可以用索引访问，或者被切片(be indexed and sliced):\n",
    "\n",
    "- visit(访问): `list[index]`\n",
    "  > 与字符串的索引一样，List的索引从0开始\n",
    "- change(改变): `list[index]=...`\n",
    "- slide(切片): `list[from:to:step]`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "square=[0,1,4,9,16,25,36]               # square中，索引为i的项的值为i的平方(i=0,1,2,3,4,5,6)\n",
    "studentData=[\"Bob\",\"M\",1024533074]\n",
    "\n",
    "# 索引示例\n",
    "print(\"index:\")\n",
    "print(\"\\t\",square[3])                   # 用索引访问square[3]\n",
    "print(\"\\t\",studentData[0])              # 用索引访问studentData[0]\n",
    "\n",
    "# 负值索引\n",
    "# square[-n]表示: square从最后往前数的第n项\n",
    "print(\"index,负数:\")\n",
    "print(\"\\t\",square[-1])                  # 表示square中的最后一项，即square[6]\n",
    "print(\"\\t\",square[-2])                  # 这里的square[-2]等价于square[5]\n",
    "\n",
    "# 修改示例\n",
    "print(\"change:\")\n",
    "studentData[0]=\"Fischl\"\n",
    "studentData[1]=\"F\"\n",
    "print(\"\\t\",studentData)\n",
    "\n",
    "# 切片示例\n",
    "#     不设定step, step默认为1\n",
    "print(\"slide,默认step:\")\n",
    "print(\"\\t\",square,square[:],square[::]) # 访问整段\n",
    "print(\"\\t\",square[1:4],square[1:4:])    # 以默认step切出square中，索引>=1且<4的项\n",
    "print(\"\\t\",square[2:],square[2::])      # 以默认step切出square中，索引>=2的项(包含索引为2的项)\n",
    "print(\"\\t\",square[:3],square[:3:])      # 以默认step切出square中，索引<3的项(不包含索引为3的项)\n",
    "\n",
    "#     负index也可以用来表示切片\n",
    "print(\"slide,负数索引:\")\n",
    "print(\"\\t\",square[-4:-2])               # 和之前一样，不包含square[-2]\n",
    "print(\"\\t\",square[:-3],square[-2:])     # 分别等价于square[:4]和square[5:]\n",
    "\n",
    "#     step表示切片中相邻两项在原list中的索引差，只能为非0整数\n",
    "print(\"slide,修改step:\")\n",
    "print(\"\\t\",square[0:5:2])               # 切片的第一项的原索引为0，第二项的索引是2，第三项的索引为4\n",
    "                                        # 理论上下一个索引为6，但to一项为5，所以这里只包含索引为0,2,4的项\n",
    "#     step也可以为负数\n",
    "#print\n",
    "print(\"slide,负数step\")\n",
    "print(\"\\t\",square[5:1:-2])              # 切片的第一项的原索引为5，第二项的原索引为5+(-2)=3\n",
    "                                        # 理论上下一个索引为3+(-2)=1，但to一项为1，所以不包含原索引为1的项"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 列表支持的方法(Method)：\n",
    "\n",
    "|方法名|用法|效果|\n",
    "|:-:|:-:|:-:|\n",
    "|append|`list.append(item)`|在`list`的末尾追加一个元素`item`|\n",
    "|insert|`list.insert(index,item)`|在`list`的索引为`index`处的元素前插入`item`|\n",
    "|remove|`list.remove(item)`|删除`list`中第一个出现的`item`，如果`item`不存在则报错`ValueError`|\n",
    "|pop|`item=list.pop(index)`|删除`list`中索引为`index`的元素并返回它|\n",
    "|index|`location=list.index(item)`|返回`list`中第一个`item`的索引值，如果`item`不存在则报错`ValueError`|\n",
    "|sort|`list.sort()`<br>`list.sort(reverse=True)`|将`list`中的元素进行稳定的排序，默认从小到大排序<br>从大到小将`list`中的元素进行稳定的排序|\n",
    "|reverse|`list.reverse()`|将`list`中的元素反向排列|\n",
    "\n",
    "\n",
    "> 注：由于篇幅限制，表格中并未给出上述方法的全部内容。可以用`help()`函数或在[Python文档官网](https://docs.Python.org/)上查询。\n",
    "\n",
    "以下是这些方法的例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cube=[0,1,729,27,64,125,216,343,729,512,216]\n",
    "print(\"append, insert, remove, pop, index:\")\n",
    "# append, insert, remove, pop, index的演示\n",
    "cube.append(729)        # 在cube的末尾添加一个729\n",
    "print(\"\\t\",cube)\n",
    "cube.insert(2,8)        # 在cube的索引为2的位置添加一个8\n",
    "print(\"\\t\",cube)\n",
    "cube.remove(729)        # 移除cube中的第一个729\n",
    "print(\"\\t\",cube)\n",
    "cube.pop(8)             # 移除cube中索引为8的元素\n",
    "print(\"\\t\",cube)\n",
    "print(\"\\t\",cube.index(216))  # 查询cube中第一个为216元素的索引\n",
    "\n",
    "numList=[5,6,7,9,8,4,2,1,3,0]\n",
    "print(\"sort,reverse:\")\n",
    "# sort和reverse的演示\n",
    "numList.sort()              # 对numList进行从小到大的排序\n",
    "print(\"\\t\",numList)\n",
    "numList.sort(reverse=True)  # 对numList进行从大到小的排序\n",
    "print(\"\\t\",numList)\n",
    "numList.reverse()           # 翻转numList\n",
    "print(\"\\t\",numList)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Nested List(嵌套列表)\n",
    "\n",
    "List中的元素也可以是List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix=[[1,0,0],[0,1,0],[0,0,1]]    # 二维列表\n",
    "print(matrix[1][2])                 # 用index访问\n",
    "\n",
    "studentData=[\"Alice\",1024000777,[[\"A+\",5],[\"A\",4],[\"A\",4],[\"A-\",3],[\"B\",3],[\"A\",1],[\"P\",1]]]\n",
    "print(studentData[1],studentData[2][-2][0])  # 用index访问"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tuple(元组)\n",
    "\n",
    "Python的元组和列表相似，但**元组中的元素不能修改**。\n",
    "\n",
    "一个元组包含了一列由**小括号**`()`包含的，用逗号`,`分割的值。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 创建元组\n",
    "clock=(\"08:00\",[5,10])\n",
    "pointLocation=(1,4,-7,84,3,0,-5)\n",
    "price=(10,)             # 当元组中只包含一个元素时，需要在该院素后添加逗号\n",
    "emptyTuple=()           # 元组也可以为空\n",
    "\n",
    "print(clock,pointLocation)\n",
    "print(price,emptyTuple)\n",
    "\n",
    "# 元组中元素的访问方法和List相同，但不允许修改元组中的元素\n",
    "print(pointLocation[0],pointLocation[1],pointLocation[-1])  # 用索引访问元组中的元素\n",
    "print(pointLocation[1:-2:2])                                # 元组的一个slide\n",
    "\n",
    "# clock[1][2]=5或clock[0]=2都不允许！"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set(集合)\n",
    "\n",
    "集合(Set)是一个无序的不重复元素序列，其中的元素不会重复，并且支持交集，并集，差集等常见的集合操作。\n",
    "\n",
    "以下是集合的创建方法："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nodeSet={1,3,9,10}      # 直接通过花括号{}创建集合\n",
    "nodeSet=set([2,4,6,8])  # 或者用set()从列表创建集合\n",
    "\n",
    "nodeSet={2,2,4,5}       # 如果元素有重复，集合会自动消除重复的元素并留下一个\n",
    "print(nodeSet)\n",
    "\n",
    "print(type({}))         # 注意！{}并非空集，而是下面所提到的字典\n",
    "print(type(set()))      # 空集应该用set()表示"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dict(字典)\n",
    "\n",
    "不同于之前的列表等，字典不以从小到大的非负整数作为索引，而是key(键)。键值可以是任何**不可变**类型的数据，例如字符串，数值或仅包含不可变类型的元组等。每个key都对应了一个value，正如列表中每个index都对应了一个值。\n",
    "\n",
    "形如`key:value`的被称为**键值对**(key-value pairs)，每个键值对之间用逗号`,`分割。一个字典可以表示为一对花括号`{}`里的一列键值。例如：\n",
    "```Python\n",
    "d={key1:value1,key2:value2}\n",
    "```\n",
    "\n",
    "唯一性：\n",
    "- 在同一个字典里，键一半是唯一的，不可变的。如果在定义的时候出现了键的重复，Python以最后一个键值对的值为准。\n",
    "- 在字典里，值不需要唯一。\n",
    "\n",
    "以下是一些具体的例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# construct(构造)的例子\n",
    "characterLevel={\"Surtr\":(2,90),\"Wis'adel\":(2,80),\"Weedy\":(2,60)}    # \"Surtr\",\"Wis'adel\",\"Weedy\"是key\n",
    "                                                                    # (2,90),(2,80),(2,60)是value\n",
    "repeatedDict={\"IML\":\"Saturday\",\"OS\":\"Monday\",\"IML\":\"Friday\"}        # 有重复键值的字典\n",
    "                                                                    # 这里key\"IML\"对应的value是\"Friday\"\n",
    "print(repeatedDict)\n",
    "\n",
    "emptyDict={}        # 空集\n",
    "print(emptyDict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 字典支持的操作\n",
    "\n",
    "- construct(构造): `di={key_1:value_1,key_2:value_2,...,key_n:value_n}`\n",
    "- visit(访问): `di[key]`\n",
    "- change(修改): `di[key]=value`\n",
    "- delete(删除): `del di[key]`\n",
    "\n",
    "上一段代码中包含了构造的示例，以下是一些其他操作的例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "examDay={\"Physics\":\"Monday\",\"Maths\":\"Friday\",\"English\":\"Tuesday\"}\n",
    "\n",
    "# visit\n",
    "print(examDay[\"English\"])       # 访问\"English\"的value\n",
    "\n",
    "# change\n",
    "examDay[\"Maths\"]=\"Wednesday\"    # 改变key\"Maths\"的value\n",
    "print(examDay)\n",
    "\n",
    "# delete\n",
    "del examDay[\"Physics\"]          # 删除key\"Physics\"对应的键值对\n",
    "print(examDay)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 集合数据类型总结\n",
    "\n",
    "|名字|是否有序|可否更改|有无索引|成员可否重复|\n",
    "|:-:|:-:|:-:|:-:|:-:|\n",
    "|List(列表)|&#10004;|&#10004;|&#10004;|&#10004;|\n",
    "|Tuple(元组)|&#10004;|&#10006;|&#10004;|&#10004;|\n",
    "|Set(集合)|&#10006;|&#10004;|&#10006;|&#10006;|\n",
    "|Dict(字典)|&#10006;|&#10004;|&#10004;|&#10006;|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 控制流 - 循环语句\n",
    "\n",
    "#### `for`循环\n",
    "\n",
    "Python中的`for`循环与C或Java等语言中的`for`有点不同。不同于用布尔表达式的真假决定循环次数的`while`，`for`循环遍历任何序列，如列表或字符串。\n",
    "\n",
    "基本语法：\n",
    "```Python\n",
    "for iterating_variable in sequence:\n",
    "    statement\n",
    "```\n",
    "\n",
    "以下是`for`循环的例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 列表的遍历\n",
    "words=[\"system\",\"coffee\",\"night\",\"bug\"]\n",
    "for w in words:\n",
    "    print(w,len(w))\n",
    "\n",
    "total=0\n",
    "counts=[5,7,9,2,1,3,3]\n",
    "for num in counts:\n",
    "    total+=num\n",
    "print(\"total =\",total)\n",
    "\n",
    "for num in counts:      # 在for循环内修改迭代的对象是很危险的！\n",
    "    if num<2:\n",
    "        counts.remove(num)\n",
    "print(\"counts is now\",counts)\n",
    "\n",
    "# 字典的遍历\n",
    "dic={\"Alice\":\"medium\",\"Bob\":\"well-done\"}\n",
    "for key in dic:         # for循环默认取字典的key\n",
    "    print(key,dic[key])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "循环嵌套(Nested for statement):\n",
    "\n",
    "以两层嵌套为例：\n",
    "```Python\n",
    "for var_1 in sequence_1:\n",
    "    statement_1\n",
    "    for var_2 in sequence_2:\n",
    "        statement_2\n",
    "    statement_3\n",
    "```\n",
    "\n",
    "注：\n",
    "- `for`,`while`,`if`等都可以互相嵌套\n",
    "- 循环嵌套也可以有更多层，但不建议在实际中编写过多层的嵌套\n",
    "\n",
    "下面是一个两层的循环嵌套的例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in [1,2,3,4,5]:       # 先遍历i\n",
    "    for j in [1,2,3,4,5]:   # 在同一个i里，按序遍历[1,2,3,4,5]\n",
    "        print(i*j,end=' ')\n",
    "    print()                 # 输出换行\n",
    "print(\"End.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 用range()控制循环\n",
    "\n",
    "`range`是Python中的一种类型，表示一个不可变的数字序列，通常用于循环中的特定次数。可以用如下语句创建：\n",
    "```python\n",
    "range(start,stop,step)\n",
    "```\n",
    "\n",
    "- `stop`不可省略；`start`和`step`可以省略。\n",
    "- 三者都必须为整数，且`step`不能为0。\n",
    "- 当只有一个参数时，默认为`stop`。\n",
    "- 当只有两个参数时，默认为`start`和`stop`。\n",
    "- `start`默认为0，`step`默认为1。\n",
    "\n",
    "表示的数字序列从`start`开始，到`stop`结束，`step`为步长。类似于上文中列表的slide。以下是一些例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(range(10))\n",
    "print(type(range(10)))\n",
    "print(list(range(10)))          # 可以用list()将其转为一个列表\n",
    "print(list(range(-5,10,4)))\n",
    "print(list(range(13,1,-2)))     # 从大到小\n",
    "print(list(range(4,2)))         # 在step为正的时候，如果start<stop，则range(start,stop)为空"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "以下是在`for`循环内使用`range()`的例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 用range改写上面的二重循环\n",
    "for i in range(1,6):\n",
    "    for j in range(1,6):\n",
    "        print(i*j,end=' ')\n",
    "    print()\n",
    "print(\"End.\")\n",
    "\n",
    "# 求1到n的和\n",
    "ans=0\n",
    "n=int(input(\"input n:\"))\n",
    "for i in range(1,n+1):      # 注意！如果写n的话，最终得到的是1到n-1的和\n",
    "    ans+=i\n",
    "print(\"1+2+3+...+n =\",n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "同样地，`break`和`continue`语句也可以用在`for`循环内："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# continue的例子\n",
    "# 将words中长度不大于5的字符串添加到longWords里\n",
    "longWords=[]\n",
    "words=[\"system\",\"coffee\",\"night\",\"end\",\"vivid\",\"doctor\",\"automatically\",\"bug\"]\n",
    "for w in words:\n",
    "    if len(w)>5:\n",
    "        continue\n",
    "    longWords.append(w)\n",
    "print(longWords)\n",
    "\n",
    "# break的例子：\n",
    "# 输出words中\"end\"前所有的字符串\n",
    "for w in words:\n",
    "    if w==\"end\":\n",
    "        break\n",
    "    print(w)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### List Comprehensions(列表推导式)\n",
    "\n",
    "利用列表推导式，我们能用一行代码生成一个列表。其一个语法为：\n",
    "```python\n",
    "[expression for item in iterable]\n",
    "```\n",
    "\n",
    "其中`expression`是包含`item`的表达式，`iterable`是一个可以遍历的对象。\n",
    "\n",
    "类似`for`循环，列表推导式会遍历`iterable`中的每个元素，将其复制到`item`中后计算`expression`的值。最后生成的列表就是包含若干个上述计算出`expression`值的列表。\n",
    "\n",
    "以下是几个具体的例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 生成上文中的square列表\n",
    "square=[x**2 for x in range(7)]\n",
    "print(square)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "列表推导式还可以包含一个可选的条件判断字句，用于过滤`item`：\n",
    "```python\n",
    "[expression for item in iterable if condition]\n",
    "```\n",
    "\n",
    "只有满足`condition`的项才会被计算。以下是一个例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "oddSquare=[x**2 for x in range(7) if x%2==1]\n",
    "print(oddSquare)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "同样地，列表推导式也可以嵌套。`expression`和`iterable`也可以是一个列表推导式。嵌套的列表推导式可以方便我们处理多维数据。\n",
    "\n",
    "当列表推导式过于复杂时，我们也应该考虑使用循环或函数代替，来保持代码可读。\n",
    "\n",
    "以下是嵌套的例子："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 生成一张乘法表\n",
    "table=[[i*j for i in range(1,6)] for j in range(1,6)]\n",
    "print(table)\n",
    "\n",
    "# 将上面的二维乘法表变为一维列表\n",
    "flattenedTable=[x for sublist in table for x in sublist]\n",
    "print(flattenedTable)\n",
    "\n",
    "# 复杂的列表推导式，不推荐！\n",
    "matrix=[[1,2,3,4],[4,5,6,7],[7,8,9,10]]\n",
    "result=[matrix[row][col] \n",
    "        for row in range(len(matrix)) \n",
    "        for col in range(len(matrix[row])) \n",
    "        if (row*col)%2!=0 and matrix[row][col]<7]\n",
    "print(result)\n",
    "\n",
    "# 推荐的替代：\n",
    "result=[]\n",
    "for row in range(len(matrix)):\n",
    "    for col in range(len(matrix[row])):\n",
    "        if (row*col)%2!=0 and matrix[row][col]<7:\n",
    "            result.append(matrix[row][col])\n",
    "print(result)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
